# -*- time-stamp-pattern: "6/#\\+DATE: +[\"<]%:y-%02m-%02d %02H:%02M:%02S %u[\">]" -*-
#+TITLE: Emacs Configuration
#+AUTHOR: Renald Buter
#+EMAIL: renald.buter@xs4all.nl
#+DATE: <2019-01-17 22:25:31 buter>
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args :tangle yes

This is my emacs configuration, the result of many years of copying and pasting from all over the internet. Thanks to
the literate programming capabilites of org-mode and some peeking at examples such as [[https://raw.githubusercontent.com/sachac/.emacs.d/gh-pages/Sacha.org][Sacha Chua's emacs config]], or [[https://raw.githubusercontent.com/larstvei/dot-emacs/master/init.org][this
configuration]] and [[https://raw.githubusercontent.com/jamiecollinson/dotfiles/master/config.org][this configuration]].

* The basics

I keep all emacs specific things in a particular directory. Note that this is currently completely tied to my OSX
machine.

#+begin_src emacs-lisp
  (defvar emacs-root
    (expand-file-name (concat (getenv "HOME") "/Play/Emacs/emacs"))
    "Root of the local emacs load path.")

  (defvar emacs-local
    (expand-file-name (concat emacs-root "/site-lisp"))
    "Local versions of elisp code")

  ;; add all the elisp directories under ~/emacs to my load path
  (add-to-list 'load-path emacs-root)
  (add-to-list 'load-path emacs-local)

  (defun rk/add-local-lib-to-path (name)
    "A utility to add directory `name` in `emacs-local` to the load-path"
    (add-to-list 'load-path (expand-file-name (concat emacs-local "/" name))))

  (defvar rk/configuration-org
    (expand-file-name (concat emacs-root "/init.org"))
    "The org file that contains this configuration.")
#+end_src

** Find this file

#+begin_src emacs-lisp
  (defun rk/find-configuration ()
    "Edit the configuration file."
    (interactive)
    (find-file rk/configuration-org))

  (global-set-key (kbd "C-c I") 'rk/find-configuration)
#+end_src

** kick off the tangling of this =init.org= into =init.el=

Copy from Sacha Chua's setup.

#+begin_src emacs-lisp
  (defun tangle-init ()
    "If the current buffer is the config file, the code-blocks are tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name) rk/configuration-org)
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil)
            (init-el (expand-file-name (concat emacs-root "/init.el"))))
        (org-babel-tangle init-el)
        (byte-compile-file init-el))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

** Start the server

To make it easy to find the socket, I pre-define it. See also [[file:~/Drives/Dropbox%20(Personal)/Notes/org-protocol-handler.org::*EmacsClient][my writeup to get Org Protocol set up]].

#+begin_src emacs-lisp
(setq-default server-socket-dir (expand-file-name "server" emacs-root))
(server-start)
#+end_src

* Defaults
** Check OS

#+begin_src emacs-lisp
;; Some simple macros to more easily tell if we're running
;; GNUEmacs or XEmacs. Taken from the .emacs of
;; sukria@online.fr | http://sukria.online.fr
;(defmacro GNUEmacs (&rest x)
;  (list 'if (not running-xemacs) (cons 'progn x)))
;(defmacro XEmacs (&rest x)
;  (list 'if running-xemacs (cons 'progn x)))
(defmacro Xlaunch (&rest x)
  (list 'if (eq window-system 'x) (cons 'progn x)))
(defmacro TTYlaunch (&rest x)
  (list 'if (not window-system) (cons 'progn x)))
(defmacro Maclaunch (&rest x)
  (list 'if (eq window-system 'ns) (cons 'progn x)))

;(provide 'os-dependence)

#+end_src
** Remove menu bar, tool bar and scroll bar
#+begin_src emacs-lisp
(when (fboundp 'menu-bar-mode)
  (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+end_src

** UTF8

#+begin_src emacs-lisp
;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+end_src

** Selecting text and transient mode

#+begin_src emacs-lisp
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; Remove text in active region if inserting text
(delete-selection-mode 1)
#+end_src

** Time stamp update

Automatically update time stamps, see https://www.emacswiki.org/emacs/TimeStamp.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'time-stamp)
(setq time-stamp-pattern nil)
#+end_src

** Directories

Put temporary stuff in a =tmp= directory.

#+begin_src emacs-lisp
(defvar emacs-tmp-dir
  (expand-file-name "~/tmp/emacs")
  "base directory where to store files like backups and autosaves ")
(make-directory emacs-tmp-dir t)

; set autosave directory
; http://snarfed.org/space/gnu%20emacs%20backup%20files
(defvar autosave-dir (concat emacs-tmp-dir "/autosaves/"))
(make-directory autosave-dir t)

; backup directory
(defvar backup-dir (concat emacs-tmp-dir "/backups/"))
(setq backup-directory-alist (list (cons "." backup-dir)))

; diskspace is cheap!
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)

; saveplace: save location in file when saving files
(setq save-place-file (concat emacs-tmp-dir "/saveplace"))
(setq-default save-place t)            ;; activate it for all buffers
(require 'saveplace)                   ;; get the package

; make informative temporary filenames
(defun make-auto-save-file-name ()
  (concat autosave-dir
   (if buffer-file-name
      (concat "#" (file-name-nondirectory buffer-file-name) "#")
    (expand-file-name
     (concat "#%" (buffer-name) "#")))))
#+end_src

** Other defaults

#+begin_src emacs-lisp
  ;; Do not create lockfiles, as they are useless on my laptop
  (setq create-lockfiles nil)

  (setq inhibit-startup-screen t)

  ;; Allow pasting selection outside of Emacs
  ;(setq x-select-enable-clipboard t)
  (setq select-enable-clipboard t)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Don't highlight matches with jump-char - it's distracting
  (setq jump-char-lazy-highlight-face nil)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be N characters wide
  (setq-default fill-column 100)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;; try visual-line-mode for a while...
  ;(remove-hook 'text-mode-hook #'turn-on-auto-fill)
  ;(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

  ;; Never insert tabs
  (set-default 'indent-tabs-mode nil)

  ;; Show me empty lines after buffer end
  (set-default 'indicate-empty-lines t)

  ;; Don't be so stingy on the memory, we have lots now. It's the distant future.
  (setq gc-cons-threshold 20000000)

  ;; Sentences do not need double spaces to end. Period.
  (set-default 'sentence-end-double-space nil)

  ;; Better scrolling behaviour
  (setq ;redisplay-dont-pause t
        scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)

  ;; Allways show parend
  (show-paren-mode 1)

  ;; Automatically reload files was modified by external program
  (global-auto-revert-mode 1)

  ;;; RB additions
  ;; Add parts of each file's directory to the buffer name if not unique
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)


  ;; Save a list of recent files visited. (open recent file with C-x f)
  (setq 
   recentf-max-saved-items 1000 ;; just 20 is too recent
   recentf-save-file     (concat emacs-tmp-dir "/recentf"))
  (recentf-mode 1)

#+end_src

** Windows

=winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch between window configurations. This is
handy when something has popped up a buffer that you want to look at briefly before returning to whatever you
were working on. When you're done, press =C-c <left>=.

#+begin_src emacs-lisp
;; Undo/redo window configuration with C-c <left>/<right>
(winner-mode 1)

; Window movement
(defun select-next-window ()
  "Switch to the next window"
  (interactive)
  (select-window (next-window)))

(defun select-previous-window ()
  "Switch to the previous window"
  (interactive)
  (select-window (previous-window)))

(global-set-key (kbd "C-M-<right>") 'select-next-window)
(global-set-key (kbd "C-M-<left>")  'select-previous-window)

#+end_src

** Hippie Expand
(setq hippie-expand-try-functions-list
      '(yas-hippie-try-expand
        try-expand-dabbrev
	try-expand-dabbrev-all-buffers
	try-expand-dabbrev-from-kill
	try-complete-file-name-partially
	try-complete-file-name
	try-expand-all-abbrevs
	try-expand-list
	try-expand-line
	try-complete-lisp-symbol-partially
	try-complete-lisp-symbol))
#+end_src
** Abbrev

#+begin_src emacs-lisp
;; Abbrev
;(setq abbrev-file-name             ;; tell emacs where to read abbrev
;      (expand-file-name (concat emacs-root "/abbrev_defs")))
;(setq save-abbrevs 'silent)        ;; save abbrevs when files are saved
#+end_src

#+NAME: abbrev
| Base    | Expansion                   |
|---------+-----------------------------|
| bc      | because                     |
| wo      | without                     |
| gddr    | GoDataDriven                |
| gddhttp | http://www.godatadriven.com |
| gsprm   | gesproken met               |
|         |                             |

#+BEGIN_SRC emacs-lisp :var data=abbrev 
(mapc (lambda (x) (define-global-abbrev (car x) (cadr x))) (cddr data))
#+END_SRC

#+RESULTS:
| gddr    | GoDataDriven                |
| gddhttp | http://www.godatadriven.com |
| gsprm   | gesproken met               |
|         |                             |

#+BEGIN_SRC emacs-lisp 
(add-hook 'text-mode-hook 'abbrev-mode)
#+END_SRC

** History

Save some history.

#+begin_src emacs-lisp
; also save my search entries, see http://fasciism.com/2017/01/13/remembering-history/
(setq savehist-additional-variables
      '(search-ring
        kill-ring
        extended-command-history
        buffer-name-history
        file-name-history
        compile-command
        regexp-search-ring))

; save every minute
(setq savehist-autosave-interval 60)     ;; save every minute (default: 5 min)
; location of the history file
(setq savehist-file
      (concat emacs-tmp-dir "/savehist")) ;; keep my home clean
; turn it on!
(savehist-mode t)                       ;; do customization before activation
#+end_src

** Only bury the scratch buffer
Bury the =*scratch*= buffer instead of killing it, makes things stay there during the whole Emacs session.

#+begin_src emacs-lisp
;; http://stackoverflow.com/questions/234963/re-open-scratch-buffer-in-emacs
(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))
#+end_src

** Some of my own functions

#+begin_src emacs-lisp
;;; From http://pages.sachachua.com/.emacs.d/Sacha.html#org04e47b9
(defun rk/unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))


(defun rk/fill-or-unfill-paragraph (&optional unfill region)
    "Fill paragraph (or REGION).
  With the prefix argument UNFILL, unfill it instead."
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list (if current-prefix-arg 'unfill) t)))
    (let ((fill-column (if unfill (point-max) fill-column)))
      (fill-paragraph nil region)))


;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+end_src

* Packages

For a long time I've resisted using packages, mostly because the packages I needed were not kept up
to date and the whole thing appeared rather unstable. Since then, things have improved and for most
thingss I've resorted to using packages. 

#+begin_src emacs-lisp
(require 'package)

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

;; For org-trello and other packages
(add-to-list 'package-archives '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

#+end_src

* OSX

#+begin_src emacs-lisp
(setq ns-alternate-modifier 'none) ; allow it to be interpreted by OSX
(define-key global-map [(alt ?v)] 'scroll-down)
;(define-key global-map [(meta ?v)] 'yank)
#+end_src

#+begin_src emacs-lisp
(setq ;mac-option-modifier 'super
      mac-command-modifier 'meta
      ;ns-function-modifier 'hyper
)



; Move to trans
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/emacs")

;(require 'htmlize)
;(rk/add-local-lib-to-path "mac-print-mode")
;(require 'mac-print-mode)
#+end_src

Do not pup up a window when opening files from Workspace, but open a new frame instead.

#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src

* Appearance

#+begin_src emacs-lisp
(Xlaunch
 (progn
   (setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
  )
)

(setq initial-frame-alist 
      '( (width . 110) 
         (height . 68) ))

(when window-system
  (set-face-attribute 'default nil
                      :family "Source Code Pro" :height 120 :weight 'regular))
;;                      :family "Input Sans Condensed" :height 120 :weight 'regular))

;; Highlight the current line
(global-hl-line-mode 1)
(set-face-background 'hl-line "#666")

;; Install zenburn color-theme
(add-to-list 'custom-theme-load-path (concat emacs-local "/" "zenburn-emacs"))
(load-theme 'zenburn t)


(setq-default mode-line-format
      (list
       ;; value of current buffer name
       "%f "
       ;; value of `mode-name`
       "[" mode-line-modes "] "
       ;; value of line, column start from 1
       "@ (%l,%C)"
       ;; '%q' displays the percentage offsets of both the start and the end of the window, e.g. "5-17%
       " -- showing: %q "
       ;; "Narrow" if narrowing is in effect
       "%n"))
       
;(provide 'setup-appearance)

#+end_src

* Org Mode

#+begin_src emacs-lisp
(rk/add-local-lib-to-path "org-mode/lisp")
(rk/add-local-lib-to-path "org-mode/contrib/lisp")

(require 'org)

; You can bulk archive (or refile/change todo etc) from within the Agenda view.
; 
; ; http://orgmode.org/manual/Agenda-commands.html#Agenda-commands
; 
; ; If you call Org-Agenda from within the buffer you want to archive you can temporarily restrict it to only that buffer and view only todo entries and filter for only DONE
; 
; ; C-c a < t
; N r
; ; Where N corresponds to the shortcut for your DONE state (with default states it would be 2)
; 
; ; Then you'd simply need to mark all the desired headlines and bulk archive
; 
; ; m (mark for bulk action)
; B a (or B $ for arch->sibling)

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cr" 'org-capture)
#+end_src

** Speed commands

Enable speed keys, as they can be quite effective. Similar in spirit to hydras.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
  (add-to-list 'org-speed-commands-user '("W" widen))
  (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
#+end_src

** More

#+begin_src emacs-lisp

  ;; Templates
  ;;; I want notes organised per day. Thanks
  ;;; http://www.howardism.org/Technical/Emacs/journaling-org.html for showing how to do this!

  (setq work-notes-dir
    (concat (or (getenv "WORKDIR") (concat (getenv "HOME") "/Work/gdd"))
            "/Notes/"))

  ;;; DOES NOT WORK ANYMORE 20180103
  ;(defun get-notes-file-today ()
  ;  "Return filename for today's journal entry."
  ;  (let ((daily-name (format-time-string "%Y%m%d.org")))
  ;    (expand-file-name (concat work-notes-dir daily-name))))

  (setq notes-file
  ;;      (expand-file-name (concat work-notes-dir "notes.org")))
        "~/Drives/Dropbox (Personal)/org/notes.org")

  ;; Set to orgmode by default when viewing notes
  ;(setq work-notes-rx (concat work-notes-dir ".*/[0-9]*$"))
  (add-to-list 'auto-mode-alist '("Notes.*/[0-9]*$" . org-mode))

  (setq org-capture-templates
        '(
          ("t" "Todo"    entry (file+headline "~/org/todo.org" "GoDataDriven")
           "* TODO %?\n :PROPERTIES:\n :CREATED: %u\n :END:")
          ("j" "Journal" entry (file "~/Drives/Dropbox (Personal)/personal/journal.org" )
           "* %^u\n%?\n** Leerpunten\n** Meer doen\n** Dankbaar\n")
          ("n" "Note" entry (file notes-file)
           "* Note entered at %<%H:%M:%S>\n%?\n"
           :empty-lines 1)
          ("w" "Capture from browser" entry
           (file+headline "~/org/capture.org" "Notes")
           "* %:description\nCaptured from %:link\n\n%i"
           :empty-lines 1)
          ))

  (setq org-outline-path-complete-in-steps nil) ; Refile in a single go 
  (setq org-completion-use-ido nil)
  (setq org-refile-use-outline-path t) ; Show full paths for refiling 
  (setq org-refile-allow-creating-parent-nodes (quote confirm)) ; allow refile to create parent tasks with confirmation
  (defun my-org-files-list ()
    (delq nil
      (mapcar (lambda (buffer)
        (buffer-file-name buffer))
        (org-buffer-list 'files t))))

  (setq org-refile-targets '((my-org-files-list :maxlevel . 3)))

  (setq org-adapt-indentation nil) ;; Avoid indenting the text below a header when promoting/demoting the header

  ;(setq org-agenda-skip-scheduled-if-done 't)
  (setq org-log-done nil)
  (setq org-hide-leading-stars t)
  (setq org-log-note-state t)
  (setq org-todo-keywords
        '((type
           "TODO(t)"     ; to be done in the near future
           "STARTED(s!)" ; on going at the moment
           "WAITING(w)"  ; was started, now waiting for external factor
           "BLOCKED(b)"  ; was started, but cannot continue until something is fixed
  ;         "APPT(a)"     ; appointment
           "|"
           "CANCELLED"   ; won't be done
  ;         "DEFERRED(e)" ; maybe in the future
           "DONE(d!/!)"  ; finished!
           )
  ;        (sequence "PROJECT(p)" "|" "FINISHED(f)")
  ;        (sequence "INVOICE(i)" "SENT(n)" "|" "RCVD(r)")
  ))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (ocaml . t)
     (ruby . t)
     (shell . t)
     (sql . t)
     ))
#+end_src

** Agenda

#+begin_src elisp
  ;(setq org-todo-keyword-faces
   ;     '( ("BLOCKED(b)" . (:foreground "yellow" :weight bold))))

  ; gebruik speciaal format, zie http://orgmode.org/org.html#Weekly_002fdaily-agenda
  ;(setq org-agenda-include-all-todo nil)
  ; I prefer return to activate a link
  (setq org-return-follows-link nil)

  ; Do not add a newline after a header
  ;(setq org-blank-before-new-entry (quote ((heading . nil) ; was: auto
  ;                                         (plain-list-item . auto))))

  (setq org-agenda-files
        '("~/org/gdd-projects.org"
          "~/org/todo.org"
          "~/org/inbox.org"
          "~/Drives/Dropbox (Personal)/personal/journal.org"))

  (setq org-default-notes-file 
        (convert-standard-filename "~/org/todo.org"))

  (setq org-agenda-custom-commands
        '(("l" todo "LATER" nil)
          ("b" todo "BLOCKED" nil)
          ("w" todo "THIS-WEEK" nil)
          ("W" todo "WAITING" nil)
          ("g" "Only GDD"
           ((agenda "Work Today"
                    ((org-agenda-span 1)))
            )
           ((org-agenda-category-filter-preset '("-Prive"))))
          ("!" "Scheduled and TODAY items"
           ((agenda "Normal agenda" ((org-agenda-ndays 1)))
            (todo "TODAY|WAITING")
            ;;          (tags "something")
            )
           ((org-sorting-strategy '(todo-state-down))
            (org-agenda-compact-blocks t))
            )))
  ;;             ("W" agenda "" ((org-agenda-ndays 21)))
  ;;              ( "A" agenda ""
  ;;                ((org-agenda-skip-function
  ;;                  (lambda nil
  ;;                    (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
  ;;                 (org-agenda-ndays 1)
  ;;                 (org-agenda-overriding-header "Today's Priority #A tasks: ")))
  ;;               ("u" alltodo ""
  ;;                ((org-agenda-skip-function
  ;;                  (lambda nil
  ;;                    (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
  ;;                                              (quote regexp) "<[^>\n]+>")))
  ;;                (org-agenda-overriding-header "Unscheduled TODO entries: "))))

  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)

  ;; Export backends
  (require 'ox-beamer)
  (require 'ox-md)
  (require 'ox-html)
  (require 'ox-latex)

  ;(require 'ox-icalendar)

  ;; From contrib. Open something in one of the following applications:
  ;; 1. 
  ;(require 'org-mac-link)
  ;(add-hook 'org-mode-hook
  ;          (lambda ()
  ;            (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)
  ;            (define-key org-mode-map (kbd "C-c C-+") 'org-indent-item)
  ;            (define-key org-mode-map (kbd "C-c C--") 'org-outdent-item)
  ;            (setq abbrev-mode 1)))


  ; From contrib. Allows you to specify a git file like [[git:/path/to/file::searchstring]]
  ;(require 'org-git-link)
  (add-hook 'org-mode-hook
            (let ((original-command (lookup-key org-mode-map [tab])))
              `(lambda ()
                 (setq yas-fallback-behavior
                       '(apply ,original-command))
                 (local-set-key [tab] 'yas-expand))
                 (abbrev-mode t)))

  ;(provide 'setup-org)

  ;; Monkey-patch org-trello to resolve issue with indenting comments


  (require 'org-trello)

  ;(defun orgtrello-entity/compute-first-comment-point! ()
  ;  "Compute the card's first comment position.
  ;Does preserve position.
  ;If no comment is found, return the card's end region."
  ;  (save-excursion
  ;    (orgtrello-entity/back-to-card!)
  ;    (let ((card-region (orgtrello-entity/compute-card-region!)))
  ;      (apply 'narrow-to-region card-region)
  ;      (let ((next-pt (-if-let (next-pt (search-forward-regexp "[*][*] " nil t)) ;; if not found, return nil and do not move point
  ;                         (save-excursion
  ;                           (goto-char next-pt)
  ;                           (point-at-bol))
  ;                       (orgtrello-entity/compute-next-card-point!))))
  ;        (widen)
  ;        next-pt))))

  ;; org-trello major mode for all .trello files
  (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))

  ; add a hook function to check if this is trello file, then activate the org-trello minor mode.
  (add-hook 'org-mode-hook
            (lambda ()
              (let ((filename (buffer-file-name (current-buffer))))
                (when (and filename (string= "trello" (file-name-extension filename)))
                (org-trello-mode)))))

  ;(add-hook 'text-mode-hook 'turn-on-orgstruct++)


  (rk/add-local-lib-to-path "ox-hugo")
  (with-eval-after-load 'ox
    (require 'ox-hugo))


  ;; Org-Protocol
  ;; https://orgmode.org/worg/org-contrib/org-protocol.html
  (require 'org-protocol)


  ;; Org-present
  ;; https://github.com/rlister/org-present
  (require 'org-present)

  (eval-after-load "org-present"
    '(progn
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (org-present-big)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (org-present-small)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write)))))



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; Deft

  (require 'deft)
  (setq deft-directory "~/Drives/Dropbox (Personal)/Notes/")
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq deft-text-mode 'org-mode)
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-auto-save-interval 0)
  ;;key to launch deft
  (global-set-key (kbd "C-c d") 'deft)

  (defun rk/deft-strip-spaces (args)
    "Replace spaces with - in the string contained in the first
     element of the list args. Used to advise deft's file naming
     function."
    (list (replace-regexp-in-string " " "-" (car args))))

  (advice-add 'deft-new-file-named :filter-args #'rk/deft-strip-spaces)

  ;(provide 'setup-org)

#+end_src

* Setup SmartParens

#+begin_src emacs-lisp
(require 'smartparens-config)
(add-hook 'org-mode-hook #'smartparens-mode)
#+end_src

* setup-keyboard.el

#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)

;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(global-set-key (kbd "M-%") 'query-replace-regexp)
(global-set-key (kbd "C-M-%") 'query-replace-regexp)

;(global-set-key "\C-x\C-r" 'recentf-open-files) ; I hate the default binding anyw ;; replaced by ivy-recentf, see setup-ivy.el

; Change the annoying defaults
(global-set-key "\C-z" 'undo)
; Another annoying one
(global-set-key [insert] nil)

; Alternatives to M-x
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

; more annoyance with the default bindings
(global-set-key [end] 'forward-word) ; instead of end-of-buffer
(global-set-key [home] 'backward-word) ; instead of beginning-of-buffer

; see rk-functions.el
(global-set-key "\C-\M-q" 'rk/unfill-paragraph)
(global-set-key "\M-q" 'rk/fill-or-unfill-paragraph)

;(provide 'setup-keyboard)

#+end_src

* Ivy, Counsel and Hydra

#+begin_src emacs-lisp
(rk/add-local-lib-to-path "swiper")

(require 'counsel)
(require 'smex) ;; for history at M-x
(require 'hydra)

(ivy-mode 1)

(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "[%d/%d] ")

(setq counsel-find-file-at-point t)

 ;; Recommended key bindings
;(global-set-key (kbd "C-s") 'counsel-grep-or-swiper)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-m") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-x C-r") 'ivy-recentf)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "C-h f") 'counsel-describe-function)
(global-set-key (kbd "C-h v") 'counsel-describe-variable)
(global-set-key (kbd "C-h l") 'counsel-find-library)
;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;(global-set-key (kbd "C-c g") 'counsel-git)
;(global-set-key (kbd "C-c j") 'counsel-git-grep)
;(global-set-key (kbd "C-c k") 'counsel-ag)
;(global-set-key (kbd "C-x l") 'counsel-locate)
;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done) ;; instead of ivy-done
(define-key ivy-minibuffer-map (kbd "M-<return>") 'ivy-done)
;(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)

(setq magit-completing-read-function 'ivy-completing-read)

(require 'flyspell-correct-ivy)
#+end_src

** Hydras

Many are from the [[https://github.com/abo-abo/hydra/wiki/Emacs][community wiki for Hydra]].

*** Buffer menu

Directly copied from the [[https://github.com/abo-abo/hydra#sample-hydras][sample hydras on github]].

#+begin_src emacs-lisp
(defhydra hydra-buffer-menu (:color pink
                             :hint nil)
  "
^Mark^             ^Unmark^           ^Actions^          ^Search
^^^^^^^^-----------------------------------------------------------------
_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
_s_: save          _U_: unmark up     _b_: bury          _I_: isearch
_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
_~_: modified
"
  ("m" Buffer-menu-mark)
  ("u" Buffer-menu-unmark)
  ("U" Buffer-menu-backup-unmark)
  ("d" Buffer-menu-delete)
  ("D" Buffer-menu-delete-backwards)
  ("s" Buffer-menu-save)
  ("~" Buffer-menu-not-modified)
  ("x" Buffer-menu-execute)
  ("b" Buffer-menu-bury)
  ("g" revert-buffer)
  ("T" Buffer-menu-toggle-files-only)
  ("O" Buffer-menu-multi-occur :color blue)
  ("I" Buffer-menu-isearch-buffers :color blue)
  ("R" Buffer-menu-isearch-buffers-regexp :color blue)
  ("c" nil "cancel")
  ("v" Buffer-menu-select "select" :color blue)
  ("o" Buffer-menu-other-window "other-window" :color blue)
  ("q" quit-window "quit" :color blue))

(define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
#+end_src

*** Character movement

Goto a line or character.

#+begin_src emacs-lisp
  (defhydra hydra-goto-line (global-map "M-g"
                             goto-map ""
                             :pre (linum-mode 1)
                             :post (linum-mode -1))
    "goto-line"
    ("g" goto-line "go")
    ("c" goto-char "char")
    ("m" set-mark-command "mark" :bind nil)
    ("q" nil "quit"))

#+end_src

*** Transpose

Transpose for many objects.

#+begin_src emacs-lisp
  (defhydra hydra-transpose (global-map "C-t"
                             :color "red")
    "Transpose for many modes and objects."
    ("c" transpose-chars "characters")
    ("w" transpose-words "words")
    ("o" org-transpose-words "Org mode words")
    ("l" transpose-lines "lines")
    ("s" transpose-sentences "sentences")
;    ("e" org-transpose-elements "Org mode elements")
    ("p" transpose-paragraphs "paragraphs")
;    ("t" org-table-transpose-table-at-point "Org mode table")
    ("q" nil "cancel" :color blue))
#+end_src

* setup-magit.el

#+begin_src emacs-lisp
(rk/add-local-lib-to-path "dash.el")
(rk/add-local-lib-to-path "with-editor")
(rk/add-local-lib-to-path "magit/lisp")

;;(require 'magit)
;;; Instead of requiring the feature magit, you could load just the autoload definitions, by loading
;;; the file magit-autoloads.el.
(load "magit/lisp/magit-autoloads")

(with-eval-after-load 'info
  (info-initialize)
  (add-to-list 'Info-directory-list
               (concat emacs-local "magit/Documentation")))

(global-set-key (kbd "C-x g") 'magit-status)

;(provide 'setup-magit)

#+end_src

* setup-markdown.el

#+begin_src emacs-lisp
(rk/add-local-lib-to-path "markdown-mode")

(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "gfm-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

;(provide 'setup-markdown)

#+end_src

* setup-ocaml.el

#+begin_src emacs-lisp
(rk/add-local-lib-to-path "tuareg")

(autoload 'tuareg-mode "tuareg" "A major mode for OCaml" t)
(add-to-list 'auto-mode-alist '("\\.ml[ily]?" . tuareg-mode))

;;; from https://github.com/realworldocaml/book/wiki/Installation-Instructions#using-emacs24-packages

;; -- Tweaks for OS X -------------------------------------
;; Tweak for problem on OS X where Emacs.app doesn't run the right
;; init scripts when invoking a sub-shell
(cond
 ((eq window-system 'ns) ; macosx
  ;; Invoke login shells, so that .profile or .bash_profile is read
  (setq shell-command-switch "-lc")))

;; -- opam and utop setup --------------------------------
;; Setup environment variables using opam
;(dolist
;   (var (car (read-from-string
;              (shell-command-to-string "opam config env --sexp"))))
;  (setenv (car var) (cadr var)))

;; Update the emacs path
(setq exec-path (split-string (getenv "PATH") path-separator))
;; Update the emacs load path
(push (concat (getenv "OCAML_TOPLEVEL_PATH")
              "/../../share/emacs/site-lisp") load-path)

;; Automatically load utop.el
(autoload 'utop "utop" "Toplevel for OCaml" t)
(autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
;(add-hook 'tuareg-mode-hook 'utop-minor-mode)

;;; Add Merlin as well
(setq opam-share (substring (shell-command-to-string "opam config var share") 0 -1))
(add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
(require 'merlin)

;; Enable Merlin for ML buffers
(add-hook 'tuareg-mode-hook 'merlin-mode)

;; -- enable auto-complete -------------------------------
;; Not required, but useful along with merlin-mode
;(rk/add-local-lib-to-path "auto-complete")
(require 'auto-complete)

(setq merlin-use-auto-complete-mode t)
(setq merlin-error-after-save nil)

(add-hook 'caml-mode-hook 'merlin-mode t)
;; Enable auto-complete
(setq merlin-use-auto-complete-mode 'easy)
;; Use opam switch to lookup ocamlmerlin binary
(setq merlin-command 'opam)


;; So you can do it on a mac, where `C-<up>` and `C-<down>` are used
;; by spaces.
(define-key merlin-mode-map
  (kbd "C-c <up>") 'merlin-type-enclosing-go-up)
(define-key merlin-mode-map
  (kbd "C-c <down>") 'merlin-type-enclosing-go-down)

(set-face-background 'merlin-type-face "#88FF44")

(add-hook 'tuareg-mode-hook 'auto-complete-mode)

;; -- Better indentation with ocp-indent --------------------
;(add-to-list 'load-path "/Users/buter/.opam/system/share/emacs/site-lisp")
(require 'ocp-indent)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;----------------------------------------------------------------------------
;; Reason setup
;;----------------------------------------------------------------------------

(defun shell-cmd (cmd)
  "Returns the stdout output of a shell command or nil if the command returned
   an error"
  (car (ignore-errors (apply 'process-lines (split-string cmd)))))

(let* ((refmt-bin (or (shell-cmd "refmt ----where")
                      (shell-cmd "which refmt")))
       (merlin-bin (or (shell-cmd "ocamlmerlin ----where")
                       (shell-cmd "which ocamlmerlin")))
       (merlin-base-dir (when merlin-bin
                          (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
  ;; Add npm merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
  (when merlin-bin
    (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
    (setq merlin-command merlin-bin))

  (when refmt-bin
    (setq refmt-command refmt-bin)))

(require 'reason-mode)
(require 'merlin)
(add-hook 'reason-mode-hook (lambda ()
                              (add-hook 'before-save-hook 'refmt-before-save)
                              (merlin-mode)))

(setq merlin-ac-setup t)

;(provide 'setup-ocaml)

#+end_src

* setup-python.el

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
(package-initialize)

;(add-hook 'python-mode-hook (lambda ()(
;                                       (abbrev-mode 1)
 ;                                      (auto-fill-mode 1)
  ;                                     (linum-mode 1)
;                                       (if (eq window-system 'x)
;                                           (font-lock-mode 1))
;                                       (elpy-enable))))

;(provide 'setup-python)

#+end_src

* setup-ruby.el

#+begin_src emacs-lisp
;(defun rk/set-compile-command-ruby
;    (set (make-local-variable 'compile-command)
;     (format "ruby -c %s" (file-name-nondirectory buffer-file-name))))

;(add-hook 'ruby-mode-hook 'rk/set-compile-command-ruby)

(add-hook 'ruby-mode-hook (lambda ()
                            (auto-fill-mode 1)
                            (linum-mode 1)))

;(provide 'setup-ruby)

#+end_src

* setup-scala.el

#+begin_src emacs-lisp
;; Add the ENSIME plugin to sbt

;; addSbtPlugin("org.ensime" % "sbt-ensime" % "1.12.7") in ~/.sbt/0.13/plugins/plugins.sbt

(use-package ensime
  :ensure t
  :pin melpa)

(use-package sbt-mode
  :pin melpa)

(use-package scala-mode
  :pin melpa)

(require 'ensime)

(add-to-list 'exec-path "/usr/local/bin")

;(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

;(provide 'setup-scala)

#+end_src

* setup-spelling.el

#+begin_src emacs-lisp
(setq ispell-program-name "/usr/local/bin/aspell")
(setq ispell-list-command "--list")

(require 'ispell)
(require 'flyspell)

(global-set-key (kbd "<f1>") 'ispell-word)
(global-set-key (kbd "C-<f1>") 'flyspell-mode)

;; https://d12frosted.io/posts/2016-05-09-flyspell-correct-intro.html
(require 'flyspell-correct)
(require 'flyspell-correct-ivy)
(setq flyspell-correct-interface 'flyspell-correct-ivy)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-previous-word-generic)

;(provide 'setup-spelling)

#+end_src

* setup-yaml.el

#+begin_src emacs-lisp
(rk/add-local-lib-to-path "yaml-mode")

(require 'yaml-mode)
;(add-to-list 'auto-mode-alist '("\\.ya\\?ml\\'" . yaml-mode))

;(provide 'setup-yaml)

#+end_src

* setup-yasnippet.el

#+begin_src emacs-lisp
;;(rk/add-local-lib-to-path "yasnippet")
(use-package yasnippet
  :defer 1
  :diminish yas-minor-mode
  :config (yas-global-mode))

(use-package yasnippet-snippets
  :after yasnippet)
;  :config (yasnippet-snippets-initialize))


(require 'yasnippet)

(setq rk/yashome (concat emacs-local "/yasnippet"))
(setq rk/yas-my-snippets (concat emacs-root "/snippets"))
(setq rk/yas-default-snippets (concat rk/yashome "/snippets"))
(setq rk/yas-yasmate-snippets (concat rk/yashome "/yasmate/snippets"))

(setq yas-snippet-dirs
      (list rk/yas-my-snippets
            rk/yas-yasmate-snippets
            rk/yas-default-snippets))

(yas-global-mode 1)

(add-to-list 'auto-mode-alist '(".*snippets/.*" . snippet-mode))
(add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)

(use-package ivy-yasnippet
  :after yasnippet)


;(provide 'setup-yasnippet)

#+end_src

* Experiments

* misc

#+begin_src emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(excorporate-configuration
   (quote
    ("renaldbuter@godatadriven.com" . "https://outlook.office365.com/EWS/Exchange.asmx")))
 '(org-trello-current-prefix-keybinding "C-c o" nil (org-trello))
 '(package-selected-packages
   (quote
    (smex deft excorporate ivy-yasnippet yasnippet-snippets flyspell-correct-ivy "s" abyss-theme applescript-mode org-trello reason-mode quelpa ## ensime use-package elpy)))
 '(safe-local-variable-values (quote ((bug-reference-bug-regexp . "#\\(?2:[0-9]+\\)")))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'narrow-to-page 'disabled nil)


#+end_src
